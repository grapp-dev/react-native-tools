import * as Platform from '@effect/platform';

import { Effect, Function } from 'effect';
import j from 'jscodeshift';

import { PrettierService } from '../../../services';

type Unpack<T> = T extends ReadonlyArray<infer K> ? Unpack<K> : T;
type StatementKind = Unpack<Parameters<(typeof j)['program']>[0]>;

export class FileSystemService extends Effect.Service<FileSystemService>()('FileSystem', {
  effect: Effect.gen(function* (_) {
    const FileSystem = yield* Platform.FileSystem.FileSystem;
    const Path = yield* Platform.Path.Path;
    const Prettier = yield* PrettierService;

    const writeFileFromDeclarations = (
      path: string,
      declarations: Array<StatementKind>,
      map = Function.identity<string>,
    ) => {
      return Effect.gen(function* (_) {
        const source = j('')
          .find(j.Program)
          .replaceWith(_ => {
            return j.program(declarations);
          })
          .toSource();

        const content = yield* Prettier.format(
          `/* eslint-disable */\n\n/* CAUTION: this file is automatically generated, do not edit it. */\n\n${map(source)}`,
        );

        yield* FileSystem.writeFileString(path, content);
      });
    };

    const writeFileFromString = (
      path: string,
      content: string,
      options?: Platform.FileSystem.WriteFileOptions,
    ) => {
      const write = FileSystem.writeFileString(path, content, options);

      return Effect.gen(function* (_) {
        if (yield* FileSystem.exists(path)) {
          return yield* write;
        }

        yield* FileSystem.makeDirectory(Path.dirname(path), { recursive: true });
        return yield* write;
      });
    };
    const exists = FileSystem.exists;

    return {
      writeFileFromDeclarations,
      writeFileFromString,
      exists,
    };
  }),
  dependencies: [],
}) {
  static layer = FileSystemService.Default;
}
